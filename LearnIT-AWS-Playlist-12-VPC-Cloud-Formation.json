{
	"Description": "This template deploys a VPC, with a pair of public and private subnets spreaded across two Availabilty Zones. It deploys an Internet Gateway, with a default  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ), and default routes for them in the private subnets.",
	"Parameters": {
		"ProjectName": {
			"Description": "The Project Name that we want to tag with every resource.",
			"Type": "String"
		},
		"EnvironmentName": {
			"Description": "An environment name that will be prefixed to resource names. Example: dev, test, stage or prod",
			"Type": "String"
		},
		"VpcCIDR": {
			"Description": "Please enter the IP range (CIDR notation) for this VPC",
			"Type": "String",
			"Default": "10.0.0.0/16"
		},
		"PublicSubnet1CIDR": {
			"Description": "Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone",
			"Type": "String",
			"Default": "10.0.1.0/24"
		},
		"PublicSubnet2CIDR": {
			"Description": "Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone",
			"Type": "String",
			"Default": "10.0.2.0/24"
		},
		"PrivateSubnet1CIDR": {
			"Description": "Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone",
			"Type": "String",
			"Default": "10.0.3.0/24"
		},
		"PrivateSubnet2CIDR": {
			"Description": "Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone",
			"Type": "String",
			"Default": "10.0.4.0/24"
		},
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"SSHLocation": {
			"Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
		},
		"DBInstanceID": {
			"Default": "mydbinstance",
			"Description": "My database instance",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "63",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "Must begin with a letter and must not end with a hyphen or contain two consecutive hyphens."
		},
		"DBName": {
			"Default": "mydb",
			"Description": "My database",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "64",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "Must begin with a letter and contain only alphanumeric characters."
		},
		"DBInstanceClass": {
			"Default": "db.t2.micro",
			"Description": "DB instance class",
			"Type": "String",
			"ConstraintDescription": "Must select a valid DB instance type."
		},
		"DBAllocatedStorage": {
			"Default": "20",
			"Description": "The size of the database (GiB)",
			"Type": "Number",
			"MinValue": "20",
			"MaxValue": "65536",
			"ConstraintDescription": "must be between 20 and 65536 GiB."
		},
		"DBUsername": {
			"NoEcho": "true",
			"Description": "Username for MySQL database access",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "16",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},
		"DBPassword": {
			"NoEcho": "true",
			"Description": "Password MySQL database access",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters."
		},
		"EC2InstanceType": {
			"Description": "EC2 instance type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": [
				"t1.micro",
				"t2.micro",
				"t2.small",
				"t2.medium",
				"m1.small",
				"m1.medium",
				"m1.large",
				"m1.xlarge",
				"m2.xlarge",
				"m2.2xlarge",
				"m2.4xlarge",
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge",
				"c1.medium",
				"c1.xlarge",
				"c3.large",
				"c3.xlarge",
				"c3.2xlarge",
				"c3.4xlarge",
				"c3.8xlarge",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"g2.2xlarge",
				"r3.large",
				"r3.xlarge",
				"r3.2xlarge",
				"r3.4xlarge",
				"r3.8xlarge",
				"i2.xlarge",
				"i2.2xlarge",
				"i2.4xlarge",
				"i2.8xlarge",
				"hi1.4xlarge",
				"hs1.8xlarge",
				"cr1.8xlarge",
				"cc2.8xlarge",
				"cg1.4xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		}
	},
	"Mappings": {
		"AWSInstanceType2Arch": {
			"t1.micro": {
				"Arch": "PV64"
			},
			"t2.nano": {
				"Arch": "HVM64"
			},
			"t2.micro": {
				"Arch": "HVM64"
			},
			"t2.small": {
				"Arch": "HVM64"
			},
			"t2.medium": {
				"Arch": "HVM64"
			},
			"t2.large": {
				"Arch": "HVM64"
			},
			"m1.small": {
				"Arch": "PV64"
			},
			"m1.medium": {
				"Arch": "PV64"
			},
			"m1.large": {
				"Arch": "PV64"
			},
			"m1.xlarge": {
				"Arch": "PV64"
			},
			"m2.xlarge": {
				"Arch": "PV64"
			},
			"m2.2xlarge": {
				"Arch": "PV64"
			},
			"m2.4xlarge": {
				"Arch": "PV64"
			},
			"m3.medium": {
				"Arch": "HVM64"
			},
			"m3.large": {
				"Arch": "HVM64"
			},
			"m3.xlarge": {
				"Arch": "HVM64"
			},
			"m3.2xlarge": {
				"Arch": "HVM64"
			},
			"m4.large": {
				"Arch": "HVM64"
			},
			"m4.xlarge": {
				"Arch": "HVM64"
			},
			"m4.2xlarge": {
				"Arch": "HVM64"
			},
			"m4.4xlarge": {
				"Arch": "HVM64"
			},
			"m4.10xlarge": {
				"Arch": "HVM64"
			},
			"c1.medium": {
				"Arch": "PV64"
			},
			"c1.xlarge": {
				"Arch": "PV64"
			},
			"c3.large": {
				"Arch": "HVM64"
			},
			"c3.xlarge": {
				"Arch": "HVM64"
			},
			"c3.2xlarge": {
				"Arch": "HVM64"
			},
			"c3.4xlarge": {
				"Arch": "HVM64"
			},
			"c3.8xlarge": {
				"Arch": "HVM64"
			},
			"c4.large": {
				"Arch": "HVM64"
			},
			"c4.xlarge": {
				"Arch": "HVM64"
			},
			"c4.2xlarge": {
				"Arch": "HVM64"
			},
			"c4.4xlarge": {
				"Arch": "HVM64"
			},
			"c4.8xlarge": {
				"Arch": "HVM64"
			},
			"g2.2xlarge": {
				"Arch": "HVMG2"
			},
			"g2.8xlarge": {
				"Arch": "HVMG2"
			},
			"r3.large": {
				"Arch": "HVM64"
			},
			"r3.xlarge": {
				"Arch": "HVM64"
			},
			"r3.2xlarge": {
				"Arch": "HVM64"
			},
			"r3.4xlarge": {
				"Arch": "HVM64"
			},
			"r3.8xlarge": {
				"Arch": "HVM64"
			},
			"i2.xlarge": {
				"Arch": "HVM64"
			},
			"i2.2xlarge": {
				"Arch": "HVM64"
			},
			"i2.4xlarge": {
				"Arch": "HVM64"
			},
			"i2.8xlarge": {
				"Arch": "HVM64"
			},
			"d2.xlarge": {
				"Arch": "HVM64"
			},
			"d2.2xlarge": {
				"Arch": "HVM64"
			},
			"d2.4xlarge": {
				"Arch": "HVM64"
			},
			"d2.8xlarge": {
				"Arch": "HVM64"
			},
			"hi1.4xlarge": {
				"Arch": "HVM64"
			},
			"hs1.8xlarge": {
				"Arch": "HVM64"
			},
			"cr1.8xlarge": {
				"Arch": "HVM64"
			},
			"cc2.8xlarge": {
				"Arch": "HVM64"
			}
		},
		"AWSRegionArch2AMI": {
			"us-east-1": {
				"PV64": "ami-5fb8c835",
				"HVM64": "ami-60b6c60a",
				"HVMG2": "ami-e998ea83"
			},
			"us-west-2": {
				"PV64": "ami-d93622b8",
				"HVM64": "ami-f0091d91",
				"HVMG2": "ami-315f4850"
			},
			"us-west-1": {
				"PV64": "ami-56ea8636",
				"HVM64": "ami-d5ea86b5",
				"HVMG2": "ami-943956f4"
			},
			"eu-west-1": {
				"PV64": "ami-95e33ce6",
				"HVM64": "ami-bff32ccc",
				"HVMG2": "ami-83fd23f0"
			},
			"eu-central-1": {
				"PV64": "ami-794a5915",
				"HVM64": "ami-bc5b48d0",
				"HVMG2": "ami-ba1a09d6"
			},
			"ap-northeast-1": {
				"PV64": "ami-393c1957",
				"HVM64": "ami-383c1956",
				"HVMG2": "ami-08e5c166"
			},
			"ap-northeast-2": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-249b554a",
				"HVMG2": "NOT_SUPPORTED"
			},
			"ap-southeast-1": {
				"PV64": "ami-34bd7a57",
				"HVM64": "ami-c9b572aa",
				"HVMG2": "ami-5a15d239"
			},
			"ap-southeast-2": {
				"PV64": "ami-ced887ad",
				"HVM64": "ami-48d38c2b",
				"HVMG2": "ami-0c1a446f"
			},
			"sa-east-1": {
				"PV64": "ami-7d15ad11",
				"HVM64": "ami-6817af04",
				"HVMG2": "NOT_SUPPORTED"
			},
			"us-east-2": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-f6035893",
				"HVMG2": "NOT_SUPPORTED"
			},
			"cn-north-1": {
				"PV64": "ami-18ac6575",
				"HVM64": "ami-43a36a2e",
				"HVMG2": "NOT_SUPPORTED"
			}
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": {
					"Ref": "VpcCIDR"
				},
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"InstanceTenancy": "default",
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${ProjectName}.${EnvironmentName}.vpc1"
						}
					},
					{
						"Key": "ProjectName",
						"Value": {
							"Ref": "ProjectName"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "EnvironmentName"
						}
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${ProjectName}.${EnvironmentName}.InternetGateway"
						}
					},
					{
						"Key": "ProjectName",
						"Value": {
							"Ref": "ProjectName"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "EnvironmentName"
						}
					}
				]
			}
		},
		"InternetGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				},
				"VpcId": {
					"Ref": "VPC"
				}
			}
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						0,
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"CidrBlock": {
					"Ref": "PublicSubnet1CIDR"
				},
				"MapPublicIpOnLaunch": true,
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${ProjectName}.${EnvironmentName}.Public-Subnet(AZ1)"
						}
					},
					{
						"Key": "ProjectName",
						"Value": {
							"Ref": "ProjectName"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "EnvironmentName"
						}
					}
				]
			}
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						1,
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"CidrBlock": {
					"Ref": "PublicSubnet2CIDR"
				},
				"MapPublicIpOnLaunch": true,
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${ProjectName}.${EnvironmentName}.Public-Subnet(AZ2)"
						}
					},
					{
						"Key": "ProjectName",
						"Value": {
							"Ref": "ProjectName"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "EnvironmentName"
						}
					}
				]
			}
		},
		"PrivateSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						0,
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"CidrBlock": {
					"Ref": "PrivateSubnet1CIDR"
				},
				"MapPublicIpOnLaunch": false,
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${ProjectName}.${EnvironmentName}.Private-Web-Subnet(AZ1)"
						}
					},
					{
						"Key": "ProjectName",
						"Value": {
							"Ref": "ProjectName"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "EnvironmentName"
						}
					}
				]
			}
		},
		"PrivateSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {
					"Fn::Select": [
						1,
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"CidrBlock": {
					"Ref": "PrivateSubnet2CIDR"
				},
				"MapPublicIpOnLaunch": false,
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${ProjectName}.${EnvironmentName}.Private-Web-Subnet(AZ2)"
						}
					},
					{
						"Key": "ProjectName",
						"Value": {
							"Ref": "ProjectName"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "EnvironmentName"
						}
					}
				]
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${ProjectName}.${EnvironmentName}.Public-Routes"
						}
					},
					{
						"Key": "ProjectName",
						"Value": {
							"Ref": "ProjectName"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "EnvironmentName"
						}
					}
				]
			}
		},
		"PublicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "InternetGatewayAttachment",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicSubnet1RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"SubnetId": {
					"Ref": "PublicSubnet1"
				}
			}
		},
		"PublicSubnet2RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"SubnetId": {
					"Ref": "PublicSubnet2"
				}
			}
		},
		"NatGatewayEIP": {
			"Type": "AWS::EC2::EIP",
			"DependsOn": "InternetGatewayAttachment",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"NatGateway": {
			"Type": "AWS::EC2::NatGateway",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": "NatGatewayEIP.AllocationId"
				},
				"SubnetId": {
					"Ref": "PublicSubnet1"
				}
			}
		},
		"PrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${ProjectName}.${EnvironmentName}.Private-Routes(AZ1)"
						}
					},
					{
						"Key": "ProjectName",
						"Value": {
							"Ref": "ProjectName"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "EnvironmentName"
						}
					}
				]
			}
		},
		"PrivateRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "NatGateway"
				}
			}
		},
		"PrivateSubnet1RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				}
			}
		},
		"PrivateSubnet2RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				}
			}
		},
		"JumpHost": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": "InternetGateway",
			"Properties": {
				"InstanceType": {
					"Ref": "EC2InstanceType"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"ImageId": {
					"Fn::FindInMap": [
						"AWSRegionArch2AMI",
						{
							"Ref": "AWS::Region"
						},
						{
							"Fn::FindInMap": [
								"AWSInstanceType2Arch",
								{
									"Ref": "EC2InstanceType"
								},
								"Arch"
							]
						}
					]
				},
				"IamInstanceProfile": {
					"Ref": "RootInstanceProfile"
				},
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${ProjectName}.${EnvironmentName}.jumpHost"
						}
					},
					{
						"Key": "ProjectName",
						"Value": {
							"Ref": "ProjectName"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "EnvironmentName"
						}
					}
				],
				"NetworkInterfaces": [{
					"GroupSet": [{
						"Ref": "PublicEC2SecurityGroup"
					}],
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"DeleteOnTermination": "true",
					"SubnetId": {
						"Ref": "PublicSubnet1"
					}
				}]
			}
		},
		"RootRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ec2.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/"
			}
		},
		"RolePolicies": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "root",
				"PolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Action": "*",
						"Resource": "*"
					}]
				},
				"Roles": [{
					"Ref": "RootRole"
				}]
			}
		},
		"RootInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "RootRole"
				}]
			}
		},
		"PublicEC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable access to the EC2 jump host",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": {
						"Ref": "SSHLocation"
					}
				}]
			}
		},
		"PrivateEC2": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": "NatGateway",
			"Properties": {
				"InstanceType": {
					"Ref": "EC2InstanceType"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"ImageId": {
					"Fn::FindInMap": [
						"AWSRegionArch2AMI",
						{
							"Ref": "AWS::Region"
						},
						{
							"Fn::FindInMap": [
								"AWSInstanceType2Arch",
								{
									"Ref": "EC2InstanceType"
								},
								"Arch"
							]
						}
					]
				},
				"IamInstanceProfile": {
					"Ref": "AppServerInstanceProfile"
				},
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Sub": "${ProjectName}.${EnvironmentName}.appServer"
						}
					},
					{
						"Key": "ProjectName",
						"Value": {
							"Ref": "ProjectName"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "EnvironmentName"
						}
					}
				],
				"NetworkInterfaces": [{
					"GroupSet": [{
						"Ref": "PrivateEC2SecurityGroup"
					}],
					"AssociatePublicIpAddress": "false",
					"DeviceIndex": "0",
					"DeleteOnTermination": "true",
					"SubnetId": {
						"Ref": "PrivateSubnet1"
					}
				}]
			}
		},
		"AppServerRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ec2.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/"
			}
		},
		"AppServerRolePolicies": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "AppServer",
				"PolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Action": "*",
						"Resource": "*"
					}]
				},
				"Roles": [{
					"Ref": "AppServerRole"
				}]
			}
		},
		"AppServerInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "AppServerRole"
				}]
			}
		},
		"PrivateEC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"DependsOn": "PublicEC2SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable access to the App Server",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"SourceSecurityGroupId": {
							"Ref": "PublicEC2SecurityGroup"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"SourceSecurityGroupId": {
							"Ref": "PublicEC2SecurityGroup"
						}
					}
				]
			}
		},
		"RdsSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "RDS Security Group",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "3306",
					"ToPort": "3306",
					"SourceSecurityGroupId": {
						"Fn::GetAtt": [
						"PrivateEC2SecurityGroup",
						"GroupId"
					]
					}
				}]
			}
		},
		"RdsSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupName": "RdsSubnetGroup",
				"DBSubnetGroupDescription": "RDS Subnet Group",
				"SubnetIds": [{
					"Ref": "PrivateSubnet1"
				},
				{
					"Ref": "PrivateSubnet2"
				}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${ProjectName}.${EnvironmentName}.mysql"
					}
				}]
			}
		},
		"MySqlDB": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"DBInstanceIdentifier": {
					"Ref": "DBInstanceID"
				},
				"DBName": {
					"Ref": "DBName"
				},
				"DBInstanceClass": {
					"Ref": "DBInstanceClass"
				},
				"DBSubnetGroupName": { "Ref": "RdsSubnetGroup" },
				"VPCSecurityGroups": [{ "Fn::GetAtt": [ "RdsSecurityGroup", "GroupId" ]}],
				"AllocatedStorage": {
					"Ref": "DBAllocatedStorage"
				},
				"Engine": "MySQL",
				"EngineVersion": "8.0.16",
				"MasterUsername": {
					"Ref": "DBUsername"
				},
				"MasterUserPassword": {
					"Ref": "DBPassword"
				}
			}
		},
		"ElasticacheSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Elasticache Security Group",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "11211",
					"ToPort": "11211",
					"SourceSecurityGroupId": {
						"Fn::GetAtt": [
						"PrivateEC2SecurityGroup",
						"GroupId"
					]
					}
				}]
			}
		},
		"ElasticacheSubnetGroup": {
			"Type": "AWS::ElastiCache::SubnetGroup",
			"Properties": {
				"CacheSubnetGroupName": "ElasticacheSubnetGroup",
				"Description": "Cache Subnet Group",
				"SubnetIds": [{
					"Ref": "PrivateSubnet1"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${ProjectName}.${EnvironmentName}.cacheSubnet"
					}
				}]
			}
		},
		"ElasticacheCluster": {
			"Type": "AWS::ElastiCache::CacheCluster",
			"Properties": {
				"Engine": "memcached",
				"CacheNodeType": "cache.t2.micro",
				"NumCacheNodes": "1",
				"CacheSubnetGroupName": { "Ref": "ElasticacheSubnetGroup" },
				"VpcSecurityGroupIds": [{
					"Fn::GetAtt": [
						"ElasticacheSecurityGroup",
						"GroupId"
					]
				}]
			}
		}
	},
	"Outputs": {
		"VPC": {
			"Description": "A reference to the created VPC",
			"Value": {
				"Ref": "VPC"
			}
		},
		"PublicSubnets": {
			"Description": "A list of the public subnets",
			"Value": {
				"Fn::Join": [
					",",
					[{
							"Ref": "PublicSubnet1"
						},
						{
							"Ref": "PublicSubnet2"
						}
					]
				]
			}
		},
		"PrivateSubnets": {
			"Description": "A list of the private subnets",
			"Value": {
				"Fn::Join": [
					",",
					[{
							"Ref": "PrivateSubnet1"
						},
						{
							"Ref": "PrivateSubnet2"
						}
					]
				]
			}
		},
		"PublicSubnet1": {
			"Description": "A reference to the public subnet in the 1st Availability Zone",
			"Value": {
				"Ref": "PublicSubnet1"
			}
		},
		"PublicSubnet2": {
			"Description": "A reference to the public subnet in the 2nd Availability Zone",
			"Value": {
				"Ref": "PublicSubnet2"
			}
		},
		"PrivateSubnet1": {
			"Description": "A reference to the private subnet in the 1st Availability Zone",
			"Value": {
				"Ref": "PrivateSubnet1"
			}
		},
		"PrivateSubnet2": {
			"Description": "A reference to the private subnet in the 2nd Availability Zone",
			"Value": {
				"Ref": "PrivateSubnet2"
			}
		}
	}
}